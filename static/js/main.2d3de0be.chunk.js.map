{"version":3,"sources":["Components/PokeCard.module.css","Components/PokeCard.js","Components/PokeList.js","Components/SearchBox.js","Containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","name","type","Type_Color","normal","poison","psychic","grass","ground","ice","fire","rock","dragon","water","bug","fighting","ghost","steel","flying","fairy","electric","dark","PokeList","state","imgUrl","type1","type2","pokeIndex","this","props","url","split","length","pokeUrl","axios","get","pokeData","data","types","imageUrl","sprites","front_default","setState","react_default","a","createElement","className","style","textAlign","alt","src","width","styles","backgroundColor","concat","textTransform","Component","pokemon","map","PokeCard","key","SearchBox","_ref","searchChange","placeholder","onChange","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","searchfield","target","value","names","res","_this$state","filteredPoke","filter","poke","toLowerCase","includes","Components_SearchBox","Components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d3de0be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"PokeCard_name__2eb4p\",\"type\":\"PokeCard_type__2jgLn\"};","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport styles from './PokeCard.module.css';\r\n\r\nconst Type_Color = {\r\n  normal: '#BDBCB1',\r\n  poison: '#A95CA0',\r\n  psychic: '#FA64B5',\r\n  grass: '#8DD851',\r\n  ground: '#EBCB59',\r\n  ice: '#96F1FF',\r\n  fire: '#FA5442',\r\n  rock: '#CAB970',\r\n  dragon: '#8573FF',\r\n  water: '#57AEFF',\r\n  bug: '#BAC91D',\r\n  fighting: '#A75546',\r\n  ghost: '#7874D5',\r\n  steel: '#C3C1D8',\r\n  flying: '#77A4FF',\r\n  fairy: '#F9AEFF',\r\n  electric: '#FDE33B',\r\n  dark: '#896854',\r\n}\r\n\r\nclass PokeList extends Component{\r\n        state={\r\n          name:'',\r\n          imgUrl:'',\r\n          type1:'',\r\n          type2:'',\r\n          pokeIndex: ''\r\n        }\r\n\r\n        async componentDidMount() {\r\n          const {name, url} = this.props;\r\n\r\n          const pokeIndex = url.split('/')[url.split('/').length-2];\r\n          const pokeUrl=`https://pokeapi.co/api/v2/pokemon/${pokeIndex}/`;\r\n          const pokeData = await axios.get(pokeUrl);\r\n\r\n          const type1 = pokeData.data.types[0].type.name;\r\n          const imageUrl = pokeData.data.sprites.front_default;\r\n\r\n          this.setState({\r\n            name:name , \r\n            imgUrl:imageUrl, \r\n            pokeIndex:pokeIndex, \r\n            type1:type1});\r\n\r\n            let type2;\r\n\r\n            if (pokeData.data.types[1]){\r\n              type2= pokeData.data.types[1].type.name;\r\n              this.setState({type2:type2});\r\n            }\r\n        }\r\n\r\n      render() {\r\n        return (\r\n          <div className='bg-washed-blue dib br3 pa3 ma2 grow shadow-5' style={{textAlign:'center'}}>\r\n            <img alt='pokeimg' src={this.state.imgUrl} style={{width:'170px'}} />\r\n            <h3>#{this.state.pokeIndex}</h3>\r\n            <h3 className={styles.name}>{this.state.name}</h3>\r\n            <div className={styles.type}>\r\n              <p className='f6 dim br-pill ph3 pv2 mb2 dib white' style={{backgroundColor:`${Type_Color[this.state.type1]}`,textTransform: 'capitalize'}}>{this.state.type1}</p>\r\n              <p className='f6 dim br-pill ph3 pv2 mb2 dib white' style={{backgroundColor:`${Type_Color[this.state.type2]}`,textTransform: 'capitalize'}}>{this.state.type2}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n  }\r\n \r\nexport default PokeList;","import React from 'react';\r\nimport PokeCard from './PokeCard';\r\n\r\nconst PokeList = (props) =>{\r\n     \r\n        return (\r\n          <div>\r\n          {props.pokemon ? (\r\n            <div>\r\n              {props.pokemon.map(pokemon=> (\r\n              <PokeCard \r\n                key={pokemon.name}\r\n                name={pokemon.name}\r\n                url={pokemon.url}\r\n              />\r\n              ))}\r\n            </div>\r\n          ):(\r\n            <h1>Loading Pokemon</h1>\r\n            )}\r\n          </div>\r\n        );\r\n      }\r\n \r\nexport default PokeList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div>\r\n        <input \r\n            className='pa3 b--black ma5'\r\n            type='search' \r\n            placeholder='Search Pokemon'\r\n            onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport PokeList from '../Components/PokeList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport axios from 'axios';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state={\r\n      url:'https://pokeapi.co/api/v2/pokemon/?limit=151',\r\n      pokemon: [],\r\n      names:[],\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  async componentDidMount(){\r\n    const res = await axios.get(this.state.url);\r\n    this.setState({pokemon:res.data['results']})\r\n}\r\n\r\n  onSearchChange = (event) => {\r\n      this.setState({searchfield: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    const {pokemon, searchfield} = this.state;\r\n    const filteredPoke = pokemon.filter(poke =>{\r\n    return poke.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    }) \r\n    return (\r\n      <div className='tc'>\r\n        <h1 className='f-headline lh-solid pt3'>Pokedex</h1>\r\n        <SearchBox className='search' searchChange={this.onSearchChange}/>\r\n        <PokeList \r\n        pokemon={filteredPoke}\r\n        url={this.state.url} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}